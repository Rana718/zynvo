
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum clubType  {
  Technology 
  Cultural
  Business
  Social
  Literature
  Design
  General
}


model User {
  id            String    @id   @default(cuid())
  email         String  @unique
  collegeName   String  @default("not joined")
  name          String?
  profileAvatar String?
  password      String
  createdAt     DateTime @default(now())
  vToken        String?
  expiryToken   Int 
  ValidFor      Int
  isVerified    Boolean? @default(false)
  clubName      String?  
  clubId        String?  
  bio           String?  @default("Zynvo Community Fresher")
  tags          String[] @default([])
  course        String?  @default("")
  year          String?  @default("")
  twitter       String? @default("")
  linkedin      String? @default("")
  instagram     String? @default("")
  eventAttended userEvents[]
  // event         event?  @relation(fields: [eventAttended], references: [id])
  club          clubs?       @relation(fields: [clubId], references: [id])
  CreatePost    CreatePost[]

}

model clubs{ // same names multiple colleges , same college multiple
  id String @id @default(uuid())
  name String 
  founderEmail String @default("none") @unique
  coremember1  String? @default("none")
  coremember2  String? @default("none")
  coremember3  String? @default("none")
  facultyEmail String @default("none")
  collegeName String 
  collegeId String @default(uuid()) @unique
  type  String @default("General")
  description String
  requirements String? @default("none")
  profilePicUrl String? 
  clubContact String @default("none")
  wings         String[] @default([])
  // is Accepted boolean default false true how , will be changed by us 
  //relations 
  posts    CreatePost[] 
  members  User[]
  events   event[]
}


model CreatePost {
  id            String      @id @default(uuid())
  title         String
  description   String
  //content       String
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  collegeName   String   @default("zync college")
  clubName      String   @default("zync club")
  collegeId     String?
  club          clubs?   @relation(fields: [collegeId], references: [collegeId])
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  //event type in future
 
}

model speakers {
  id        Int      @id @default(autoincrement())
  profilePic String? 
  about      String
  name      String
  email     String   @unique
  eventId   String 
  event     event    @relation(fields: [eventId], references: [id])
}

model event {
  id String    @id @default(uuid())
  posterUrl String? @default("")
  EventMode String @default("Hybrid") //online, offline, Hybrid
  EventType String @default("general") // give the options on frontend
  eventHeaderImage String? @default("none")
  EventName String @unique
  description String
  prizes String @default("no prizes given")
  TeamSize Int @default(1)
  Venue String @default("")
  EventUrl String? @default("")
  applicationStatus String @default("open") // open/ closed , frontend par button hoga jo ki core member click krke isko close kr skta hai as desired.
  clubName  String
  clubId    String
  university String 
  createdAt DateTime  @default(now())
  startDate String 
  endDate   String?
  collegeStudentsOnly Boolean @default(true)  
  participationFee Boolean @default(false)
  contactEmail String 
  contactPhone Int?
  club      clubs  @relation(fields: [clubId], references: [id])
  speakers  speakers[]
  attendees userEvents[]
}

model userEvents {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     event   @relation(fields: [eventId], references: [id])
  eventId   String
  uniquePassId String? @default("none")
  joinedAt  DateTime @default(now())

  @@id([userId, eventId]) // Composite primary key
}
